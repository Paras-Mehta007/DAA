#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// By using unordered_map


void twosum(vector<int>&arr,int key)
{
 onordered_map<int,int>mp;

for(int i=0;i<arr.size();i++){
 int comp=key-arr[i];

 if(mp.find(comp)!=mp.end()){
  cout << "Pair found: (" << complement << ", " << arr[i]<< ")" << endl;
            return; 
}

map[arr[i]]=1
}

cout<<"Element not found";
}


// By sorting the array 
void twosum(vector<int>& arr, int key, vector<pair<int, int>>& ans) {
    sort(arr.begin(), arr.end());  // Sort the array
    
    int i = 0;
    int j = arr.size() - 1;
    
    while (i < j) {  // Avoid checking the same element twice
        int sum = arr[i] + arr[j];
        if (sum == key) {
            ans.push_back({arr[i], arr[j]});  
            i++;
            j--;
        } else if (sum < key) {
            i++;  
        } else {
            j--;  
        }
    }
}

int main() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int key;
    cout << "Enter the key: ";
    cin >> key;

    vector<pair<int, int>> ans;
    twosum(arr, key, ans);


 // for map
  twosum(arr,key);

    if (ans.empty()) {
        cout << "Element not found" << endl;
    } else {
        cout << "Pairs with sum " << key << " are: " << endl;
        for (auto& p : ans) {
            cout << "(" << p.first << ", " << p.second << ")" << endl;
        }
    }

    return 0;
}
