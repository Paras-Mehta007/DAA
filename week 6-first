#include<iostream>
#include<vector>
using namespace std;

void addedge(vector<vector<int>> &adjmatrix,int u,int v){
    adjmatrix[u][v]=1;
}

bool dfs(int src,int des,vector<vector<int>>&adjmatrix,vector<bool>&visited,int v)
{
     if(src==des) return true;
     
     visited[src]=true;
     
     
     for(int neighbour=0;neighbour<v;neighbour++)
     {
         if(adjmatrix[src][neighbour] && !visited[neighbour])
         {
             if(dfs(neighbour,des,adjmatrix,visited,v))
             return true;
         }
     }
     return false;
}

bool ispathexist(vector<vector<int>>&adjmatrix,int v,int src,int des)
{
    vector<bool>visited(v,false);
    return dfs(src,des,adjmatrix,visited,v);
    
}

int main() {
    int V;
    cout << "Enter number of vertices: ";
    cin >> V;

    vector<vector<int>> adjMatrix(V, vector<int>(V, 0)); 

    cout << "Enter adjacency matrix:" << endl;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            char ch;
            cin >> ch;
            adjMatrix[i][j] = ch - '0';
        }
    }
    

    int src, dest;
    cout << "Enter source and destination vertices: ";
    cin >> src >> dest;

    src--; 
    dest--;

    if (ispathexist(adjMatrix, V, src, dest))
        cout << "Path exists between " << src+1 << " and " << dest+1 << endl;
    else
        cout << "No path exists between " << src+1 << " and " << dest+1 << endl;

    return 0;
}
