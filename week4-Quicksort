Randomized Quick-Sort
#include<iostream>
#include<vector>
#include <cstdlib>


using namespace std;
int comparison=0;
int noofswaps=0;
int partition(vector<int>&arr,int low,int high){

    int pivot=arr[low];

    int i=low;
    int j=high;

    while(i<j)
    {
     
      while(arr[i]<=pivot && i<=high-1){
        comparison++;
        i++;
      }
      while(arr[j]>pivot && j>=low+1){
        comparison++; 
        j--;
      }
      if(i<j)
      {
        noofswaps++;
        swap(arr[i],arr[j]);
      }
    }
    noofswaps++;
    swap(arr[low],arr[j]);
    return j;
}

void quicksort(vector<int>&arr,int low,int high){

    if(low<high)
    {
      int r = low + rand() % (high - low + 1);
        swap(arr[low],arr[r]);
        int pi=partition(arr,low,high);
        quicksort(arr,low,pi-1);
        quicksort(arr,pi+1,high);
    }
}
int main()
{
 int n;
 cout<<"enter the size of the Array:";
  cin>>n;

  vector<int>arr(n);
  cout<<"Enter the elements of the Array:";
  for(int i=0;i<n;i++)
  {
    cin>>arr[i];
  }

  quicksort(arr,0,n-1);

  for(int i=0;i<n;i++)
  {
    cout<<arr[i]<<" ";
  }
  cout<<endl;

  cout<<"No of comparisons:"<<comparison<<endl;
  cout<<"No of swaps:"<<noofswaps<<endl;

}
